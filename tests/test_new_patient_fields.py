#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª–µ–π –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤
Test for new patient fields
"""

import requests
import json

BASE_URL = "http://localhost:5000/api"

def test_create_patient_with_new_fields():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞—Ü–∏–µ–Ω—Ç–∞ —Å –Ω–æ–≤—ã–º–∏ –ø–æ–ª—è–º–∏"""
    print("\n--- Testing Create Patient with New Fields ---")
    
    patient_data = {
        "name": "–¢–µ—Å—Ç–æ–≤–∞—è –ü–∞—Ü–∏–µ–Ω—Ç–∫–∞",
        "age": 28,
        "pregnancy_icd10": "O24.4",
        "pregnancy_description": "Gestational diabetes mellitus",
        "comorbidity_icd10": "I10",
        "comorbidity_description": "Essential hypertension",
        "weeks_pregnant": 20,
        "address": "123 Test Street, Test City",
        "zip_code": "12345",
        "phone_number": "+7-999-123-45-67",
        "email": "test@example.com"
    }
    
    response = requests.post(f"{BASE_URL}/patients", json=patient_data)
    print(f"Status Code: {response.status_code}")
    print(f"Response: {response.json()}")
    
    assert response.status_code == 201
    assert response.json()['success'] == True
    
    patient = response.json()['patient']
    assert patient['name'] == "–¢–µ—Å—Ç–æ–≤–∞—è –ü–∞—Ü–∏–µ–Ω—Ç–∫–∞"
    assert patient['pregnancy_icd10'] == "O24.4"
    assert patient['comorbidity_icd10'] == "I10"
    assert patient['weeks_pregnant'] == 20
    assert patient['trimester'] == 2  # 20 –Ω–µ–¥–µ–ª—å = 2 —Ç—Ä–∏–º–µ—Å—Ç—Ä
    
    print("‚úÖ Create patient with new fields passed!")
    return patient['id']

def test_get_patient_with_new_fields(patient_id):
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞—Ü–∏–µ–Ω—Ç–∞ —Å –Ω–æ–≤—ã–º–∏ –ø–æ–ª—è–º–∏"""
    print(f"\n--- Testing Get Patient with New Fields (ID: {patient_id}) ---")
    
    response = requests.get(f"{BASE_URL}/patients/{patient_id}")
    print(f"Status Code: {response.status_code}")
    print(f"Response: {response.json()}")
    
    assert response.status_code == 200
    assert response.json()['success'] == True
    
    patient = response.json()['patient']
    assert 'pregnancy_icd10' in patient
    assert 'comorbidity_icd10' in patient
    assert 'weeks_pregnant' in patient
    assert 'address' in patient
    assert 'trimester' in patient  # –î–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–∞—Å—Å—á–∏—Ç–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    
    print("‚úÖ Get patient with new fields passed!")

def test_update_patient_with_new_fields(patient_id):
    """–¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ü–∏–µ–Ω—Ç–∞ —Å –Ω–æ–≤—ã–º–∏ –ø–æ–ª—è–º–∏"""
    print(f"\n--- Testing Update Patient with New Fields (ID: {patient_id}) ---")
    
    update_data = {
        "weeks_pregnant": 25,
        "comorbidity_description": "Updated hypertension description"
    }
    
    response = requests.put(f"{BASE_URL}/patients/{patient_id}", json=update_data)
    print(f"Status Code: {response.status_code}")
    print(f"Response: {response.json()}")
    
    assert response.status_code == 200
    assert response.json()['success'] == True
    
    patient = response.json()['patient']
    assert patient['weeks_pregnant'] == 25
    assert patient['trimester'] == 3  # 25 –Ω–µ–¥–µ–ª—å = 3 —Ç—Ä–∏–º–µ—Å—Ç—Ä
    
    print("‚úÖ Update patient with new fields passed!")

def test_backward_compatibility():
    """–¢–µ—Å—Ç –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º–∏ –ø–æ–ª—è–º–∏"""
    print("\n--- Testing Backward Compatibility ---")
    
    patient_data = {
        "name": "–°—Ç–∞—Ä–∞—è –ü–∞—Ü–∏–µ–Ω—Ç–∫–∞",
        "age": 25,
        "zip_code": "54321",
        "conditions_icd10": ["O24.4", "I10"],
        "trimester": 2
    }
    
    response = requests.post(f"{BASE_URL}/patients", json=patient_data)
    print(f"Status Code: {response.status_code}")
    print(f"Response: {response.json()}")
    
    assert response.status_code == 201
    assert response.json()['success'] == True
    
    patient = response.json()['patient']
    assert patient['name'] == "–°—Ç–∞—Ä–∞—è –ü–∞—Ü–∏–µ–Ω—Ç–∫–∞"
    assert 'conditions_icd10' in patient
    assert 'trimester' in patient
    
    print("‚úÖ Backward compatibility passed!")
    return patient['id']

def test_risk_assessment_with_new_fields(patient_id):
    """–¢–µ—Å—Ç –æ—Ü–µ–Ω–∫–∏ —Ä–∏—Å–∫–∞ —Å –Ω–æ–≤—ã–º–∏ –ø–æ–ª—è–º–∏"""
    print(f"\n--- Testing Risk Assessment with New Fields (ID: {patient_id}) ---")
    
    response = requests.post(f"{BASE_URL}/assess-risk/{patient_id}")
    print(f"Status Code: {response.status_code}")
    print(f"Response: {response.json()}")
    
    assert response.status_code == 200
    assert response.json()['success'] == True
    assert 'risk_level' in response.json()
    
    print("‚úÖ Risk assessment with new fields passed!")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –ø–æ–ª–µ–π –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤")
    print("=" * 50)
    
    try:
        # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞—Ü–∏–µ–Ω—Ç–∞ —Å –Ω–æ–≤—ã–º–∏ –ø–æ–ª—è–º–∏
        patient_id = test_create_patient_with_new_fields()
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞—Ü–∏–µ–Ω—Ç–∞
        test_get_patient_with_new_fields(patient_id)
        
        # –¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ü–∏–µ–Ω—Ç–∞
        test_update_patient_with_new_fields(patient_id)
        
        # –¢–µ—Å—Ç –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        old_patient_id = test_backward_compatibility()
        
        # –¢–µ—Å—Ç –æ—Ü–µ–Ω–∫–∏ —Ä–∏—Å–∫–∞
        test_risk_assessment_with_new_fields(patient_id)
        test_risk_assessment_with_new_fields(old_patient_id)
        
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        print(f"\n‚ùå –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ—à–µ–ª: {e}")
        return False
    
    return True

if __name__ == "__main__":
    main()
